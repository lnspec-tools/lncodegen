# code generated by the lncodegen.rs please do not edit

from lnspec_py.basic_type.int import U16Int, U32Int
from lnspec_py.basic_type.bitmask import Bitfield
from lnspec_py.basic_type.tvl_record import TVLRecord

class InitMsg: 

    def __init__(msg_type, gflen, globalfeatures, flen, features, init_tlvs):
        self__msg_type = msg_type
        self__gflen = gflen
        self__globalfeatures = globalfeatures
        self__flen = flen
        self__features = features
        self__init_tlvs = init_tlvs
    # close scope


    def encode(self) -> str:
        raw_msg = ''
        raw_msg += self.__msg_type.encode()
        raw_msg += self.__gflen.encode()
        if self.__globalfeatures >= 0:
         	 raw_msg = Bitfield.encode(self.__globalfeatures)
        raw_msg += self.__flen.encode()
        if self.__features >= 0:
         	 raw_msg = Bitfield.encode(self.__features)
        raw_msg = self.__init_tlvs.encode()
        return raw_msg
    # close scope


    @staticmethod
    def decode(raw_msg: str):
        msg_type, raw_msg = U32Int.decode_with_hex_str(raw_msg)
        gflen, raw_msg = U16Int.decode_with_hex_str(raw_msg)
        globalfeatures, raw_msg = Bitfield.decode_with_len(raw_msg)
        flen, raw_msg = U16Int.decode_with_hex_str(raw_msg)
        features, raw_msg = Bitfield.decode_with_len(raw_msg)
        init_tlvs = TLVRecord(raw_msg)
        init_tlvs.decode()
        return InitMsg(msg_type, gflen, globalfeatures, flen, features, init_tlvs)
    # close scope


# close scope
# close scope